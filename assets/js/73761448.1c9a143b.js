"use strict";(self.webpackChunkavdan_os_docs=self.webpackChunkavdan_os_docs||[]).push([[9533],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(g,s(s({ref:n},p),{},{components:t})):a.createElement(g,s({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9267:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const r={sidebar_position:1},s="C++ Code Guidelines",o={unversionedId:"contributing/development/code_guidelines/cpp_guidelines",id:"contributing/development/code_guidelines/cpp_guidelines",title:"C++ Code Guidelines",description:"Names",source:"@site/docs/avdanos/contributing/development/code_guidelines/cpp_guidelines.mdx",sourceDirName:"contributing/development/code_guidelines",slug:"/contributing/development/code_guidelines/cpp_guidelines",permalink:"/docs/contributing/development/code_guidelines/cpp_guidelines",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"C Code Guidelines",permalink:"/docs/contributing/development/code_guidelines/c_guidelines"},next:{title:"Rust Code Guidelines",permalink:"/docs/contributing/development/code_guidelines/rust_guidelines"}},l={},c=[{value:"Names",id:"names",level:2},{value:"Use pascal case for structs and snake case for variables and functions.",id:"use-pascal-case-for-structs-and-snake-case-for-variables-and-functions",level:4},{value:"Use full words, except when the variable name is too long.",id:"use-full-words-except-when-the-variable-name-is-too-long",level:4},{value:"Use descriptive names in functions.",id:"use-descriptive-names-in-functions",level:4},{value:"Leave useless variable names out of function declarations.",id:"leave-useless-variable-names-out-of-function-declarations",level:4},{value:"Switch",id:"switch",level:2},{value:"In switch cases don&#39;t indent another level.",id:"in-switch-cases-dont-indent-another-level",level:4},{value:"Headers",id:"headers",level:2},{value:"Use <code>#pragma once</code> for header files. Why? Because <code>#pragma once</code> is less prone to making mistakes and it is less code to type.",id:"use-pragma-once-for-header-files-why-because-pragma-once-is-less-prone-to-making-mistakes-and-it-is-less-code-to-type",level:4},{value:"Include libraries first, then include local headers.",id:"include-libraries-first-then-include-local-headers",level:4},{value:"Blocks",id:"blocks",level:2},{value:"When writing a function, or a for cycle, don&#39;t write curly braces at the beginning of a new line.",id:"when-writing-a-function-or-a-for-cycle-dont-write-curly-braces-at-the-beginning-of-a-new-line",level:4},{value:"Use 4 spaces as tab instead of 2.",id:"use-4-spaces-as-tab-instead-of-2",level:4},{value:"Statements",id:"statements",level:2},{value:"Use conditional operators instead of if else statements.",id:"use-conditional-operators-instead-of-if-else-statements",level:4},{value:"When the statement is too long, go to a new line.",id:"when-the-statement-is-too-long-go-to-a-new-line",level:4},{value:"Types",id:"types",level:2},{value:"Delete <code>int</code> when using an <code>unsigned</code> modifier, and don&#39;t use a <code>signed</code> modifier.",id:"delete-int-when-using-an-unsigned-modifier-and-dont-use-a-signed-modifier",level:4}],p=(d="Notice",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var d;const u={toc:c};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"c-code-guidelines"},"C++ Code Guidelines"),(0,i.kt)(p,{type:"wip",url:"/docs/avdanos/contributing/development/code_guidelines/cpp_guidelines.mdx",mdxType:"Notice"}),(0,i.kt)("h2",{id:"names"},"Names"),(0,i.kt)("h4",{id:"use-pascal-case-for-structs-and-snake-case-for-variables-and-functions"},"Use pascal case for structs and snake case for variables and functions."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When defining a const variable always write it in UPPERCASE"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Example;\nsize_t example_t;\nvoid example_func();\nint example_var;\nconst EXAMPLE_VAR;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"struct example;\nsize_t exampleT; // size_t exampleSize;\nvoid ExampleFunc(); // void exampleFUNC();\nint exampleVar;\nconst example_var;\n")),(0,i.kt)("h4",{id:"use-full-words-except-when-the-variable-name-is-too-long"},"Use full words, except when the variable name is too long."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int my_var;\nint length;\nchar width;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int my_variable;\nint len;\nchar width;\n")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When declaring a constant use always CONST and not PREPROCESSOR DIRECTIVES"))),(0,i.kt)("h4",{id:"use-descriptive-names-in-functions"},"Use descriptive names in functions."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"char convert_to_ascii(int);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"char to_ascii(int);\n")),(0,i.kt)("h4",{id:"leave-useless-variable-names-out-of-function-declarations"},"Leave useless variable names out of function declarations."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"char my_character(char);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"char my_character(char character);\n")),(0,i.kt)("h2",{id:"switch"},"Switch"),(0,i.kt)("h4",{id:"in-switch-cases-dont-indent-another-level"},"In switch cases don't indent another level."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Same thing for classes!"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'switch (foo) {\ncase 1:\n    printf("bread");\ncase 2:\n    printf("akane");\ndefault:\n    printf("akane cat");\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'switch (foo) {\n    case 1:\n        printf("bread");\n    case 2:\n        printf("akane");\n    default:\n        printf("akane cat");\n}\n')),(0,i.kt)("h2",{id:"headers"},"Headers"),(0,i.kt)("h4",{id:"use-pragma-once-for-header-files-why-because-pragma-once-is-less-prone-to-making-mistakes-and-it-is-less-code-to-type"},"Use ",(0,i.kt)("inlineCode",{parentName:"h4"},"#pragma once")," for header files. Why? Because ",(0,i.kt)("inlineCode",{parentName:"h4"},"#pragma once")," is less prone to making mistakes and it is less code to type."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#pragma once\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#ifndef FILE_H\n#define FILE_H\n\n/*\n * code\n*/\n\n#endif // FILE_H\n")),(0,i.kt)("h4",{id:"include-libraries-first-then-include-local-headers"},"Include libraries first, then include local headers."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <stdio.h>\n\n#include "file.h"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "file.h"\n\n#include <stdio.h>\n')),(0,i.kt)("h2",{id:"blocks"},"Blocks"),(0,i.kt)("h4",{id:"when-writing-a-function-or-a-for-cycle-dont-write-curly-braces-at-the-beginning-of-a-new-line"},"When writing a function, or a for cycle, don't write curly braces at the beginning of a new line."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'int my_function(int a, int b) {\n    // code\n}\n\nfor (int i = 0; i <= 10; i++) {\n    printf("%d\\n", i);\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'int my_function(int a, int b)\n{\n    // code\n}\n\nfor (int i = 0; i <= 10; i++)\n{\n    printf("%d\\n", i);\n}\n')),(0,i.kt)("h4",{id:"use-4-spaces-as-tab-instead-of-2"},"Use 4 spaces as tab instead of 2."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int my_function(int a, int b) {\n  // code\n\n  if (my_statement == true)\n  {\n    // code\n  }\n  else\n  {\n    return 1;\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int my_function(int a, int b) {\n    // code\n\n    if (my_statement == true)\n    {\n        // code\n    }\n    else\n    {\n        return 1;\n    }\n}\n")),(0,i.kt)("h2",{id:"statements"},"Statements"),(0,i.kt)("h4",{id:"use-conditional-operators-instead-of-if-else-statements"},"Use conditional operators instead of if else statements."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'my_variable % 2 == 0 ? printf("even") : printf("odd");\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'if (my_variable % 2 == 0) {\n    printf("even");\n} else {\n    printf("odd");\n}\n')),(0,i.kt)("h4",{id:"when-the-statement-is-too-long-go-to-a-new-line"},"When the statement is too long, go to a new line."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'my_variable  % 2 == 0 && my_variable2 % 4 == 0 ? printf("foo") : \\\nmy_variable3 % 6 == 0 && my_variable4 % 8 == 0 ? printf("fee") : printf("fuu");\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'my_variable  % 2 == 0 && my_variable2 % 4 == 0 ? printf("foo") : my_variable3 % 6 == 0 && my_variable4 % 8 == 0 ? printf("fee") : printf("fuu");\n')),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("h4",{id:"delete-int-when-using-an-unsigned-modifier-and-dont-use-a-signed-modifier"},"Delete ",(0,i.kt)("inlineCode",{parentName:"h4"},"int")," when using an ",(0,i.kt)("inlineCode",{parentName:"h4"},"unsigned")," modifier, and don't use a ",(0,i.kt)("inlineCode",{parentName:"h4"},"signed")," modifier."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do \u2705"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"unsigned my_variable;\nint my_variable2;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't \u274c"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"unsigned int a;\nsigned b;\nsigned int c;\n")))}m.isMDXComponent=!0}}]);